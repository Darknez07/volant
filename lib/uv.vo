import "uv.h"

// Loop
enum RunMode {
	Default = 0,
	Once,
	NoWait
};
enum LoopOption {
	BlockSignal = 0
};

struct Loop {
	__loop: __UNSAFE_INTERNAL__uv_loop_t;

	Init := func (self: *Loop) {
		__UNSAFE_INTERNAL__uv_loop_init(&self.__loop);
		__UNSAFE_INTERNAL__uv_loop_set_data(&self.__loop, cast(*void)self);
	};
	Close := func (self: *Loop) {
		__UNSAFE_INTERNAL__uv_loop_close(&self.__loop);
	};
	Configure := func (self: *Loop, option: LoopOption) {
		__UNSAFE_INTERNAL__uv_loop_configure(&self.__loop, cast(__UNSAFE_INTERNAL__uv_loop_option)option);
	};
	Run := func (self: *Loop, mode: UvRunMode) {
		__UNSAFE_INTERNAL__uv_run(&self.__loop, cast(__UNSAFE_INTERNAL__uv_run_mode)mode);
	};
	Stop := func (self: *Loop) {
		__UNSAFE_INTERNAL__uv_stop(&self.__loop);
	};
	Now := func (self: *Loop) u64 {
		return __UNSAFE_INTERNAL__uv_now(&self.__loop);
	};
	UpdateTime := func (self: *Loop){
		__UNSAFE_INTERNAL__uv_update_time(&self.__loop);
	};
};

UvGetDefaultLoop := func () *Loop {
	return cast(*Loop)__UNSAFE_INTERNAL__uv_default_loop();
};

// Handle
enum HandleType {
	UnknownHandle = 0,
	Async,
	Check,
	FsEvent,
	FsPoll,
	Handle,
	Idle,
	NamedPipe,
	Poll,
	Prepare,
	Process,
	Stream,
	Tcp,
	Timer,
	Tty,
	Udp,
	Signal,
	File,
	HandleTypeMax
};

struct HandleData {
	self: *void;
	internal: *void;
	user: *void;
};

struct Handle {
	Loop: *Loop;
	__handle: __UNSAFE_INTERNAL__uv_handle_t;
	
	data: HandleData;
	init := func (self: *Handle) {
		self.data.self = cast(*void)self;
		__UNSAFE_INTERNAL__uv_handle_set_data(&self.__handle, &self.data);
	};
	setInternalData := func (self: *Handle, data: *void) {
		self.data.internal = data;
	};
	getInternalData := func (self: *Handle) *void {
		return self.data.internal;
	};
	setUserData := func (self: *Handle, data: *void) {
		self.data.user = data;
	};
	getUserData := func (self: *Handle) *void {
		return self.data.user;
	};
	onClose := func (handle: *__UNSAFE_INTERNAL__uv_handle_t) {
		data := *cast(*HandleData)(__UNSAFE_INTERNAL__uv_handle_get_data(handle));
		(*(cast(*func(*Handle))data.internal))(data.self);
	};
	IsActive := func (self: *Handle) bool {
		return __UNSAFE_INTERNAL__uv_is_active(&self.__handle) != 0;
	};
	IsClosing := func (self: *Handle) bool {
		return __UNSAFE_INTERNAL__uv_is_closing(&self.__handle) != 0;
	};
	Close := func (self: *Handle, cb: *func(*Handle)) {
		if !self.IsClosing() {
			self.setInternalData(cast(*void)cb);
			__UNSAFE_INTERNAL__uv_close(&self.__handle, cast(__UNSAFE_INTERNAL__uv_close_cb)&self.onClose);
		}
	};
	Ref := func (self: *Handle) {
		__UNSAFE_INTERNAL__uv_ref(&self.__handle);
	};
	Unref := func (self: *Handle) {
		__UNSAFE_INTERNAL__uv_unref(&self.__handle);
	};
	SetData := func (self: *Handle, data: *void) {
		self.setUserData(data);
	};
	GetData := func (self: *Handle) *void {
		return self.getUserData();
	};
};

// Req
enum ReqType {
	UnknownReq = 0,
	Req,
	Connect,
	Write,
	Shutdown,
	UdpSend,
	Fs,
	Work,
	GetAddrInfo,
	GetNameInfo,
	ReqTypeMax
};

// needs work, I am still unsure about the exact use cases of uv requests.
struct Req {
	__req: __UNSAFE_INTERNAL__uv_req_t;

	Cancel := func (self: *Req) bool {
		return __UNSAFE_INTERNAL__uv_cancel(&self.__req) == 0;
	};
	SetData := func (self: *Req, data: *void) {
		__UNSAFE_INTERNAL__uv_req_set_data(&self.__req, data);
	};
	GetData := func (self: *Req) *void {
		return __UNSAFE_INTERNAL__uv_req_get_data(&self.__req);
	};
};

// Timer
struct Timer {
	..Handle;
	
	Init := func (self: *Timer){
		__UNSAFE_INTERNAL__uv_timer_init(&self.Loop.__loop, cast(*__UNSAFE_INTERNAL__uv_timer_t)&self.__handle);
		self.init();
	};
	Start := func (self: *Timer, callback: *func(*Timer), timeout: u64, repeat: u64) {
		self.setInternalData(cast(*void)callback);
		__UNSAFE_INTERNAL__uv_timer_start(cast(*__UNSAFE_INTERNAL__uv_timer_t)&self.__handle, self.callback, timeout, repeat);
	};
	Again := func (self: *Timer) {
		__UNSAFE_INTERNAL__uv_timer_again(cast(*__UNSAFE_INTERNAL__uv_timer_t)&self.__handle);
	};
	SetRepeat := func (self: *Timer, repeat: u64) {
		__UNSAFE_INTERNAL__uv_timer_set_repeat(cast(*__UNSAFE_INTERNAL__uv_timer_t)&self.__handle, repeat);
	};
	GetRepeat := func (self: *Timer) u64 {
		__UNSAFE_INTERNAL__uv_timer_get_repeat(cast(*__UNSAFE_INTERNAL__uv_timer_t)&self.__handle);
	};
	Stop := func (self: *Timer) {
		__UNSAFE_INTERNAL__uv_timer_stop(cast(*__UNSAFE_INTERNAL__uv_timer_t)&self.__handle);
	};
	callback := func (timer: *__UNSAFE_INTERNAL__uv_timer_t){
		data := *cast(*HandleData)(__UNSAFE_INTERNAL__uv_handle_get_data(cast(* __UNSAFE_INTERNAL__uv_handle_t)timer));
		(*(cast(*func(*Timer))data.internal))(data.self);
	};
};

// UvCheck
struct UvCheck {
	..Handle;
	
	Init := func (self: *UvCheck){
		__UNSAFE_INTERNAL__uv_check_init(&self.Loop.__loop, &self.__handle);
		self.init();
	};
	Start := func (self: *UvCheck, callback: *func(*UvCheck)){
		self.setInternalData(cast(*void)callback);
		__UNSAFE_INTERNAL__uv_check_start(&self.__handle, cast(*__UNSAFE_INTERNAL__uv_check_cb)self.data.internal);
	};
	Stop := func (self: *UvCheck){
		__UNSAFE_INTERNAL__uv_check_stop(&self.__handle);
	};
	callback := func (check: *__UNSAFE_INTERNAL__uv_check_t){
		data := *cast(*HandleData)(__UNSAFE_INTERNAL__uv_handle_get_data(check));
		(*(cast(*func(*UvCheck))data.internal))(data.self);
	};
};
